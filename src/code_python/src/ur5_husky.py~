#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
import time
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *

JOINT_NAMES = ['ur5_arm_shoulder_pan_joint', 'ur5_arm_shoulder_lift_joint', 'ur5_arm_elbow_joint',
               'ur5_arm_wrist_1_joint', 'ur5_arm_wrist_2_joint', 'ur5_arm_wrist_3_joint']

Q1 = [-2,-0.6,-1.5,4,1,0.5]

client = None


class GoForward():
    def __init__(self):
        rospy.init_node('GoForward', anonymous=False)
	rospy.loginfo("To stop HUSKY CTRL + C")
        rospy.on_shutdown(self.shutdown)
        self.cmd_vel = rospy.Publisher('husky_velocity_controller/cmd_vel', Twist, queue_size=10)
                client = actionlib.SimpleActionClient('arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
        r = rospy.Rate(10);
        move_cmd = Twist()
        move_cmd.linear.x = -0.2
	move_cmd.angular.z = 0
    def move():
        g = FollowJointTrajectoryGoal()
        g.trajectory = JointTrajectory()
        g.trajectory.joint_names = JOINT_NAMES
        g.trajectory.points = [
        JointTrajectoryPoint(positions=Q1, velocities=[0]*6, time_from_start=rospy.Duration(2.0))]
    client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def main():
    global client
    try:
        rospy.init_node("test_move", anonymous=True, disable_signals=True)
        client = actionlib.SimpleActionClient('arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
        print "Waiting for ur5_arm server..."
        client.wait_for_server()
        print "Connected to ur5_arm server"
        move()
    except KeyboardInterrupt:
        rospy.signal_shutdown("KeyboardInterrupt")
        raise

        while not rospy.is_shutdown():
            self.cmd_vel.publish(move_cmd)
            r.sleep()                                    
        
    def shutdown(self):
        rospy.loginfo("Stop the husky")
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)
 
if __name__ == '__main__':
    try:
        GoForward()
	main() 
   	
    except:
        rospy.loginfo("GoForward node terminated.")

